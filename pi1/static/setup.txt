plugin.tx_damfrontend_pi1 = USER_INT
plugin.tx_damfrontend_pi1 {
	_LOCAL_LANG.default.EXAMPLEMARKER = Hallo Welt2
	_LOCAL_LANG.de.EXAMPLEMARKER = Hallo Welt3
	
	userFunc = tx_damfrontend_pi1->main
	templateFile = {$plugin.tx_damfrontend_pi1.templateFile}
	iconBaseAddress = 
	singleID = {$plugin.tx_damfrontend_pi1.singleID}
	#TODO move to search box
	allowedLanguages = EN,DE
	filter {
		errorWrap = {$plugin.tx_damfrontend_pi1.filter.errorWrap}
	}
	useAdvancedCategoryTree = 0
		#if more than one tree element at a page is use, then a AND selection is used between the trees
	useTreeAndSelection = 1 
	
		# force download or display in file in the browser
	forceDownloadForFiles=1
	
	categoryTree {
		showCategoriesControl=1
		preSelectChildCategories = 0
		showHiddenCategories = 0
		useLanguageOverlay = 1
		wrap = |
		# plus control to select categories
		plusIcon = IMAGE
		plusIcon {
			file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}catplus.gif
			wrap = |
			params.width = 8
			params.height = 11
			# additional parameters are added via extension
			stdWrap.typolink.parameter.data = TSFE:id
			stdWrap.typolink.additionalParams.insertData = 1
		}
		
		# wrap for the category title
		catTitle.stdWrap.wrap = |
		catTitle.no_access.wrap = |
		
		
		# wrap for the whole category line
		category.wrap = |
			
		expandTreeLevel = 0
		minusIcon < .plusIcon
		minusIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}catminus.gif

		equalsIcon < .plusIcon
		equalsIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}catequals.gif

		stdWrap.wrap = <div class="cattree">|</div>
		stdWrapControl.wrap = <div class="control" >|</div>
		
		# TypoLink for categoryTitle
		categoryTitle.ATagParams = class="titlewrap"		
		categoryTitle.wrap = |
		categoryTitle.length = 30
		
		#categoryTitle.action options are catPlus or catEquals
		categoryTitle.action = catEquals 
		
		#IMAGE Objects for rendering the cat tree
		treePlusIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}plus.gif
		treePlusIconBottom.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}plusbottom.gif
		treeMinusIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}minus.gif
		treeMinusIconBottom.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}minusbottom.gif
		treeJoinIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}join.gif
		treeJoinIconBottom.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}joinbottom.gif
		
		treeRootIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}catfolder.gif
		treeCatIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}cat.gif
		treeOpenCatIcon.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}folder_open.png
		treeRootOpenIcon < .treeOpenCatIcon  
		treeNavIcons {
			# default objects are IMAGE
			line.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}line.gif
			line.params.widht = 18
			line.params.height= 16
			blank < .line
			blank.file = {$plugin.tx_damfrontend_pi1.renderCategoryTree.iconPath}blank.gif
		}
		#tree root stdWrap
		treeRoot.wrap = |
		fileicon.wrap = |
	}
	
	categorisationTree < .categoryTree
	categorisationTree {
		categoryTitleNoAccess.wrap = <span style="color: #aaa">|</span>
	}
	
	
	categoryTreeAdvanced {
		templateFile = EXT:dam_frontend/pi1/template_tree.html
		showHiddenCategories = 0
		useLanguageOverlay = 1
		# if = 1 then a second subpart (TREE_ELEMENT_2) is used to render the even rows
		category.useAlternatingSubpart = 1
		#option split, if you want to use different markers for each row of a tree
		category.marker =  ###TREE_ELEMENT### |*| ###TREE_ELEMENT_2### || ###TREE_ELEMENT### |*|		
		#marker if you want don't want to use alternating rows for the tree 
		category.marker_single =  ###TREE_ELEMENT###
		
		# 1 to show the root category (tree name) 
		showRootCategory=0
		
		# mark categories which a user has no download right (set visual stylse via selectionStatus.no_access)
		markNotAllowedCategories = 1 
		categoryTitle.treePlus.wrap =  <span class="tree_open">|</span>
		categoryTitle.treeMinus.wrap =  <span class="tree_close">|</span>
		categoryTitle.treeNoControl.wrap =  <span class="tree_noControl">|</span>
		categoryTitle.no_cat_access.wrap =  <span class="tree_noControl">|</span>
		categoryTitle.length = 30
		categoryTitle.wrap = |
		
		
		categorySelection {
			selected.wrap = |
			unselected.wrap = |
			partlySelected.wrap = |
			link = TYPOLINK
			selectionStatus.tree_selectedCats=checkbox_green
			selectionStatus.tree_unselectedCats=checkbox	
			selectionStatus.tree_selectedAllCats=checkbox_green	
			selectionStatus.tree_selectedPartlyCats=checkbox_grey		
			selectionStatus.tree_selectedNoCats=checkbox			
			selectionStatus.tree_no_access=no_access			
		}
		
		category_tree_selector.wrap = |&nbsp;
		category_tree_selector_all = TYPOLINK
		category_tree_selector_all {
			parameter.data = TSFE:id
			wrap = |&nbsp;/&nbsp;
		}
		category_tree_selector_none = TYPOLINK
		category_tree_selector_none {
			parameter.data = TSFE:id
			wrap = |&nbsp;
		}
		treeLevelCSS {
			paddingLeft = 16
			paddingRight = 0
			paddingTop = 0
			paddingBottom = 0
		}
		wrap = |
	}
	
	categorySelection {
		useLanguageOverlay=1
	}
	
	
	renderFields {
	# set stdWrap config for each field
		file_size {
			setContentToCurrent = 1
			if.isTrue.current = 1
			bytes = 1
			bytes.labels = "Bytes| Kilobyte| Megabyte| Gigabyte"
		}
		# stdWrap : Timestamp of file
		tstamp.strftime =  %Y/%m/%d
		# stdWrap : Creation Timestamp of file
		crdate.strftime =  %Y/%m/%d
		crdate.prepend = TEXT
		crdate.prepend {
			value = (new)
			lang.de = (neu)
			if.isLessThan.data = date:U
			if.value.field = crdate
			if.value.stdWrap.wrap = |+ {$plugin.tx_damfrontend_pi1.newUntilSeconds}
			if.value.prioriCalc = 1
		}
		crdate_age.stdWrap.age = 1
		date_cr < .crdate
		#title.typolink.target= _blank
		title.typolink.parameter.data = TSFE:id
		
		title.typolink.parameter.if.value=1
		title.typolink.parameter.if.equals.field=allowDownload
  		title.typolink.additionalParams = &eID=dam_frontend_push&docID={field:uid}
		title.typolink.additionalParams.insertData = 1
		
		link_download.typolink.parameter.data = TSFE:id
		link_download.typolink.parameter.if.value=1
		link_download.typolink.parameter.if.equals.field=allowDownload
		
  		link_download.typolink.additionalParams = &eID=dam_frontend_push&docID={field:uid}
		link_download.typolink.additionalParams.insertData = 1
		
		link_download.if.value = 1
		link_download.if.equals.data=allowDownload
		

		link_single.typolink {
			#parameter.data = TSFE:id
			additionalParams = &tx_damfrontend_pi1[showUid]={field:uid}&tx_damfrontend_pi1[confirmDeleteUID]=&tx_damfrontend_pi1[editUID]=&tx_damfrontend_pi1[catEditUID]=
			additionalParams.insertData = 1
			addQueryString = 1
			no_cache  = 1
		}
		categoryTitle {
			wrap = |
		}
		
		category.htmlSpecialChars = 0
		category.cObject = CONTENT
		category.cObject {
			table =  tx_dam_cat
			select {
				pidInList = {$plugin.tx_damfrontend_pi1.mediafolder}
				selectFields = *
				join = tx_dam_mm_cat
				where = tx_dam_cat.uid = tx_dam_mm_cat.uid_foreign
				andWhere (
					 tx_dam_mm_cat.uid_local = {field:uid}
				)
				andWhere.insertData = 1
				languageField = sys_language_uid
			}
			renderObj = TEXT
			renderObj.field = title
			renderObj.wrap = |<br />
			stdWrap.override = Please set constant "plugin.tx_damfrontend_pi1.mediafolder".
			stdWrap.override.if.isFalse = {$plugin.tx_damfrontend_pi1.mediafolder}
		}
	}
	singleView < .renderFields
	singleView {
		file_name {
			typolink.parameter.data = TSFE:id
			typolink.parameter.if.value=1
			typolink.parameter.if.equals.field=allowDownload
  			typolink.additionalParams = &eID=dam_frontend_push&docID={field:uid}
			typolink.additionalParams.insertData = 1
			typolink.extTarget = _blank

			prepend = IMAGE
			prepend.file {
				import.dataWrap = {field:file_path}{field:file_name}|
				width = 100m
				height = 100m
			}
			prepend.stdWrap.wrap = |<br />
			# Only if the file could be rendered
			prepend.stdWrap.if.isTrue.data = TSFE:lastImageInfo|0
			
		}
		link_download = IMAGE
		link_download {
			file = EXT:dam_frontend/res/ico/clip_pasteafter.gif
			#style="border-width: 0px
			stdWrap.typolink {
				parameter.data = TSFE:id
  				additionalParams = &eID=dam_frontend_push&docID={field:uid}
				additionalParams.insertData = 1
			}
			if.value=1
			if.equals.field=allowDownload
		}
		
		link_download_hash < .link_download
		
		backLink = IMAGE
		backLink {
			file = EXT:dam_frontend/res/ico/turn_left.gif
			wrap = | 
		}
	}
	
	filterView {
		from_day.ifEmpty =
		from_month.ifEmpty =
		from_year.ifEmpty.data = date:U
		from_year.ifEmpty.strftime =  %Y
		to_day.ifEmpty =
		to_month.ifEmpty =
		to_year.ifEmpty.data = date:U
		to_year.ifEmpty.strftime =  %Y
		filetype.ifEmpty =
		searchword.ifEmpty =
		searchword.htmlSpecialChars = 1
		# komma separated list of fields from tx_dam
		searchwordFields = description, title
		# display only user of these fe_usergroups in the owner selector (commaseparated)
		filterUserGroup = 
		dropdown_categories_header.wrap = <label>|</label>
		# if searchAllCats are filtered by allowedCats, then you can define, if the selected cats used as mounts or as normal cats
		searchCatsAsMounts = 1
		
		filetypes {
			pdf = pdffile
			word = wordfile
			jpg = jpegfile
			gif = giffile
			zip = zipfile
			eps = epsfile
			tif = tifffile
		}
		
		
		# custom Filters allowed filtertype: TEXT, TIMESTAMP, INT (for custom columns in the dam table)
		customFilters {
			# Example for a custom filter
			#tx_sh_damext1_literaturetype {
			#	type = TEXT
			#	field = tx_sh_damext1_literaturetype 
			#	# name of the post value 
			#	GP_Name = literatureType
			#	marker = literatureType
			
			#	renderAs = SELECTOR
			#	renderAs.HELLO1 = HELLO1
			#	renderAs.HELLO2 = HELLO2
			#	renderAs.HELLO3 = HELLO2
			
			#}  
		}
		
		multipleSearchWords {
			operator_translate_table {
				AND {
					0 = +
					1 = AND
					2 = UND
				}
				OR	{
					0 = |
					1 = OR
					2 = ODER
				}
				NOT {
					0 = -
					1 = NOT
					2 = NICHT
				}	
			}
			# Spaces are used as OR or AND operator
			defaultOperator = OR
		}
		
		
	}

	easySearch {
		useLanguageOverlay =1
		selectAllChilds=0
	}
	
	categorySelection {
		useLanguageOverlay =1
	}
	
	# configuration for subpart ###FILELIST###
	filelist < .renderFields
	filelist {
		useLanguageOverlay = 0
		
		# typolink : formurl action
		form_url.parameter.data = TSFE:id
		form_url.addQueryString = 1
		# how many items should be default in the filelist
		defaultLength = 10
		useAlternatingRows = 1
		marker {
			filelist_record = ###FILELIST_RECORD###
			# optionSplit is possible:
			filelist_record_alterning = ###FILELIST_RECORD_ODD### |*| ###FILELIST_RECORD_EVEN### || ###FILELIST_RECORD_ODD### |*|
		}
		
		# comma separated list of dam columns, which should be searched (use only text columns)
		searchwordFields = title, description

		#pre defined sorting
		usePreDefinedSorting=1
		orderBy = crdate DESC
		
		#oder by clause for the lastestView
		newFilesViewOrderBy = crdate DESC
		
		#groupedFileListUseBackEndSorting: Shows the Categories sorted like set in the flexform in the backend
		groupedFileListUseBackEndSorting = 1
		
		#sorting for the categories in the grouped filelist (allowed values: ASC, DESC) (works only if the setting groupedFileListUseBackEndSorting = 0)
		groupedFileListCategorySorting = ASC
		
		# make column titles sortable
		sortLinksForTitles = 0
		
		sortlinks {
			asc = TEXT
			asc.data = LLL:EXT:dam_frontend/pi1/locallang.xml:asc
			desc < .asc
			desc.data = LLL:EXT:dam_frontend/pi1/locallang.xml:desc
			title < .asc
			title.data = LLL:EXT:dam_frontend/pi1/locallang.xml:LABEL_TITLE
			title.asc.wrap =  <span class="Sort_Desc">|</span>
			title.desc.wrap =  <span class="Sort_Asc">|</span>
			title.no_sort.wrap = <span class="Sort_Not">|</span>
			file_name < .title
			file_name.data = LLL:EXT:dam_frontend/pi1/locallang.xml:FILE_NAME_HEADER
			language < .title
			language.data = LLL:EXT:dam_frontend/pi1/locallang.xml:LANGUAGE_HEADER
			
			date_cr < .title
			date_cr.data = LLL:EXT:dam_frontend/pi1/locallang.xml:CR_DATE_HEADER
			tx_damfrontend_feuser_upload < .title
			tx_damfrontend_feuser_upload.data = LLL:EXT:dam_frontend/pi1/locallang.xml:OWNER_HEADER
			
		}
		
		latestView {
			#shows only the last days
			latestDays = 30
			# Categories which are selected in the flexform are used as mounts, if set to 0 they are used as single cats
			useCatsAsMounts = 1
			#latestField must be date field
			field = crdate
			# shows only the last nr. of items, only used if latestDays are set to 0
			limit = 20
		}

		# if turned on, all childs of a selected category are selected too (cats are selected statically in the BE)
		staticCatSelection.selectChildCats = 0
		 
		link_select_download {
			typolink.returnLast = url
			typolink.parameter.data = TSFE:id
  			typolink.additionalParams = &eID=dam_frontend_push
			typolink.additionalParams.insertData = 1
			typolink.extTarget = _blank

			# TEXT Objects, starting with "1"
			1.value = not chosen
			1.wrap=<option value="">|</option>
			1.lang.de=nicht gew&auml;hlt
			
			2.value = <option value="ORIGINAL:ORIGINAL">original</option>

			3.wrap = <option value="width:1024;y:768;resample:72">|</option>
			3.value = resized 1024 * 768 72 dpi
			3.lang.de = F&uuml;r Powerpoint optimiert

			4.wrap = <option value="width:1024;height:768;resample:300">|</option>
			4.value = 1024x768 - 300 DPI {field:uid}
			4.insertData = 1
			4.if.equals.field = media_type
			4.if.value = 2

			5.wrap = <option value="width:100;height:100;resample:20">|</option>
			5.value = thumbnail
			5.lang.de = Thumbnail
		}

		link_download = IMAGE
		link_download {
			file = EXT:dam_frontend/res/ico/clip_pasteafter.gif
			#style="border-width: 0px
			stdWrap.typolink {
				parameter.data = TSFE:id
  				additionalParams = &eID=dam_frontend_push&docID={field:uid}
				additionalParams.insertData = 1
			}
			if.value=1
			if.equals.field=allowDownload
		}

		link_download_hash < .link_download

		link_single = IMAGE
		link_single {
			file = EXT:dam_frontend/res/ico/zoom.gif
			#style="border-width: 0px
			stdWrap.typolink {
				parameter.data = TSFE:id
				additionalParams = &tx_damfrontend_pi1[showUid]={field:uid}&tx_damfrontend_pi1[backPid]={TSFE:id}
				additionalParams.insertData = 1
				no_cache  = 1
			}
		}

		button_catedit < .link_single
		button_catedit {
			file = EXT:dam_frontend/res/ico/edit_rtewiz.gif
			stdWrap.typolink {
				additionalParams = &tx_damfrontend_pi1[showUid]=&tx_damfrontend_pi1[confirmDeleteUID]=&tx_damfrontend_pi1[editUID]=&tx_damfrontend_pi1[catEditUID]={field:uid}
			}
		}

		button_edit  < .link_single
		button_edit {
			file = EXT:dam_frontend/res/ico/edit_fe.gif
			stdWrap.typolink {
				additionalParams = &tx_damfrontend_pi1[showUid]=&tx_damfrontend_pi1[confirmDeleteUID]=&tx_damfrontend_pi1[editUID]={field:uid}&tx_damfrontend_pi1[catEditUID]=
			}
		}

		button_delete  < .link_single
		button_delete {
			file = EXT:dam_frontend/res/ico/garbage.gif
			stdWrap.typolink {
				additionalParams = &tx_damfrontend_pi1[showUid]=&tx_damfrontend_pi1[confirmDeleteUID]={field:uid}&tx_damfrontend_pi1[editUID]=&tx_damfrontend_pi1[catEditUID]=
			}
		}

		security_options {
			redirectToLoginPage=0
			redirectToURL = http://localhost:8888/dam_test/index.php?id=11&redirect_url=
			showOnlyFilesWithPermission=0
			deleteFilesOfDeletedRecords = 1
			# how long is link with a hash valid (in seconds)
			hashValidity = 604800
			checkOutFolders {
				#1 = fileadmin/
				#2 = fileadmin/user4
			}
		}
		
		browselink {
			browselinkUsePrevNext = 1
			#wrap around the whole browselinks
			resultList.wrap = <a name="test"></a>|
			#wrap for a single browse link e.g. 1, 2, ...
			wrap= |
			typolink.section = test
			typolink.parameter.data = TSFE:id
			
			#typolink.addQueryString = 1
			typolink.parameter.insertData = 1
		}
		
		browselinkPrev = TEXT
		browselinkPrev.typolink.section = test
		browselinkPrev.typolink.parameter.data = TSFE:id
		browselinkPrev.data = LLL:EXT:dam_frontend/pi1/locallang.xml:BROWSELINK_PREV
		
		browselinkNext < .browselinkPrev
		browselinkNext.data = LLL:EXT:dam_frontend/pi1/locallang.xml:BROWSELINK_NEXT
		
		browselinkLast.wrap  = |
		browselinkFirst.wrap  = |
		
		browselinkCurrent.wrap= <span style="border: 1px solid black">|</span>
		
		fileDeleteSuccessMessage {
			# typolink : formurl action
			form_url.parameter.data = TSFE:id
			form_url.addQueryString = 1
			form_url.returnLast = url
			form_url.additionalParams = &tx_damfrontend_pi1[deleteUID]=
		}
		fileDeleteMessage {
			# typolink : formurl action
			form_url.parameter.data = TSFE:id
			form_url.addQueryString = 1
			form_url.returnLast = url
			form_url.additionalParams = &tx_damfrontend_pi1[confirmDeleteUID]=
			buttonConfirm.wrap = |
			buttonCancel.wrap = |
		}
		fileEdit{
			# members of these FE groups are allowed to edit  
			uids_FEGroups =
			button_confirm.wrap = |
			button_cancel.wrap = |
		}
		
		mailOptions {
			#The signatures are getting rendered automatically via /frontend/class.tx_damfrontend_rendering.php
			signatures {
				1 = TEXT
				1 {
					value = HeadQuarter
					signature = TEXT
					signature.value = Hallo Welt
				}
				2 = TEXT
				2 {
					value = München
					signature = TEXT
					signature.value = Hallo Welt in München
				}
			}
			signaturesSelector.wrap = <br>|
			wrap = <br>|<br>
			label = TEXT
			label {
				data = LLL:EXT:dam_frontend/pi1/locallang.xml:LABEL_SIGNATURE
				wrap =<label>|</label>
			}
		}
	}

	explorerView < .categoryTreeAdvanced
	explorerView {
		# how many items should be default in the filelist
		defaultLength = 9999
		category.wrap = |
		useLanguageOverlay = 1
		# if category.useAlternatingSubpart = 1 then a second subpart (TREE_ELEMENT_2) is used to render the even rows
		category.useAlternatingSubpart = 0
		#option split, if you want to use different markers for each row of a tree
		category.marker =  ###EXPLORER_VIEW### |*| ###EXPLORER_VIEW_2### || ###EXPLORER_VIEW### |*|		
		#marker if you want don't want to use alternating rows for the tree 
		category.marker_single =  ###EXPLORER_VIEW###
		
		# 1 to show the root category (tree name) 
		showRootCategory=0
		
		treeLevelCSS {
			paddingLeft = 16
			paddingRight = 0
			paddingTop = 0
			paddingBottom = 0
		}
		wrap = |
		
		# shows a message, that there are no files in this cat (using LL: noDocInCat)
		showEmptyMessage = 1
		showEmptyMessage.wrap = <li>|</li>
	}
	
	explorerViewElements <.filelist
	explorerViewElements {
		useAlternatingRows = 0
		lastestView <
		marker {
			filelist_record = ###EXPLORERVIEW_RECORD###
			# optionSplit is possible:
			filelist_record_alterning = ###EXPLORERVIEW_RECORD_ODD### |*| ###EXPLORERVIEW_RECORD_EVEN### || ###EXPLORERVIEW_RECORD_ODD### |*|
		}
		filelist.wrap = <ul style="list-style:none;">|</ul>
	}


	# configuration for subpart ###FILTERVIEW###
	filterview {
		# typolink : formurl action
		form_url.parameter.data = TSFE:id
		form_url.addQueryString = 1
	}


	mediaTypes {
		DEFAULT {
		  DEFAULT = default.png
		}

		text {
		  DEFAULT = text_default.png
		}

		image {
		  DEFAULT = image_default.png
		}

		application {
		  pdf = application_pdf.png
		  msexcel = image_default.png
		  msword = doc.gif
		  DEFAULT = application_default.png
		}
  	}
  	

  	drillDown {
		selectorBox {
			stdWrap.wrap = |
			css {
				# a integer is added for the depth
				id = tx_damfrontend_pi_drilldown
				class = tx_damfrontend_pi_drilldown
			}
			option.stdWrap.wrap =  |
			displayAnEmptyOption = 1
			displayAnEmptyOption.localLangLabel =
			displayAnEmptyOption.label = 
		}
		sortCategoriesByTitle=1
  	}


  	upload {
  		allowedVersioningMethods {
	  		versioning = 0
	  		versioning.wrap = <input type="radio" name="version_method" value="new_version" /><label>###VERSIONING_NEW_VERSION###|</label><br />
	  		overwrite = 1
	  		overwrite.wrap = <input type="radio" name="version_method" value="override" /><label>###VERSIONING_OVERWRITES###|</label><br />
	  		newRecord = 1
	  		newRecord.wrap = <input type="radio" name="version_method" value="new_record" /><label>###VERSIONING_NEW_RECORD###|</label>
  		}
  		useOneStepUpload = 0
  		#these fe Groups are automatically assigned, always a document is uploaded or saved 
  		autoAssignFEGroups = 
  		
  		autoFillFEUserData {
  			#left side column of the dam record - right side fe_user column
  			creator = name
  		}
  		enableCategoryPreSelection = 1
  		preSelectChildCategories = 0
  		successMessage {
			# typolink : formurl action
			form_url.parameter.data = TSFE:id
			form_url.addQueryString = 1
			form_url.returnLast = url
		}
		renderUploadForm {
			button_upload.wrap = |
			# typolink : formurl action
			form_url.parameter.data = TSFE:id
			form_url.addQueryString = 1
		}
  		conf {
  			checkMime = 0
			mimeInclude = image/gif,image/jpeg,application/x-zip-compressed
			mimeExclude = application/octet-stream
			checkExt = 1
			extExclude = exe,php,php3
			extInclude = *
			maxsize = 5242880
			path =fileadmin/
			uploadTempDir = dam_frontend_upload/
			FEuserHomePath=1
			FEuserHomePath.field = username
			noOverwrite = 1
			fileMode = 0755
			_CSS_DEFAULT_STYLE (
			
			)
			_LOCAL_LANG.default {
		
			}
			_DEFAULT_PI_VARS {
		
			}
			
			#	This cObject must contain the upload-form
			#
			#	The upload form must at least contain the following:
			#
			#	a) an input field of type "file" and name "tx_fileupload_pi1"
			#	b) an input field of type "submit" and name "tx_fileupload_pi1[do_upload]"
			#
			#	If you insert the marker ###STATUS### it will be replaced by any status messages that was generated
			#	following an upload
			#
			
			uploadformcObject = TEXT
			uploadformcObject.insertData = 1
			uploadformcObject.value(
			
							###STATUS###
			
							<form enctype="multipart/form-data" method="POST">
							<input type="hidden" name="MAX_FILE_SIZE" value="500000">
							<input name="tx_fileupload_pi1" type="file"><br>
							<input type="submit" name="tx_fileupload_pi1[do_upload]" value="{LLL:EXT:fileupload/pi1/locallang.php:submitupload}"><br>
							</form>	
			)
			
			
			#	These are the status messages that can be displayed after an upload request has been processed
			
			message{
			
				#File already exists on server
				exist = TEXT
				exist.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:error.exist}</p>
				exist.insertData = 1
		
		
				#File too big
				toobig = TEXT
				toobig.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:error.toobig}</p>
				toobig.insertData = 1
		
				#Mime type not allowed
				mimenotallowed = TEXT
				mimenotallowed.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:error.mimenotallowed}</p>
				mimenotallowed.insertData = 1
				
				#File extension not allowed
				extensionnotallowed = TEXT
				extensionnotallowed.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:error.extensionnotallowed}</p>
				extensionnotallowed.insertData = 1
		
				#Upload was succesfull
				uploadsuccesfull = TEXT
				uploadsuccesfull.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:uploadsuccesfull}</p>
				uploadsuccesfull.insertData = 1
				
				#File was only partially uploaded
				partial = TEXT
				partial.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:error.partial}</p>
				partial.insertData = 1
		
				#No file was uploaded
				nofile = TEXT
				nofile.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:error.nofile}</p>
				nofile.insertData = 1
		
				#Unknown error
				unknown = TEXT
				unknown.value = <p>{LLL:EXT:fileupload/pi1/locallang.php:error.unknown}</p>
				unknown.insertData = 1
			}
  		}
  	}
  	_CSS_DEFAULT_STYLE (
		/*---------------------------------- category tree */

		.cattree td {
			font-size: 80%;
		}
		.cattree img {
			padding: 0px;
			background: none;
			margin: 0px;
			border-width: 0px;
		}

		.cattree td a img {
			border-width: 0px;
			border-color: white;
			padding: 0px;
			margin: 0px;
		}

		a:link,
		a:visited {
			color: #373535;
			text-decoration: none;
		}
		.cattree td a  {
			border-width: 0px;
			border-color: white;
			padding: 0px;
			margin: 0px;
		}
		.cattree div.control{
			width: 100px;
		}
		td.typo3-browsetree-control {
			width:5%;
		}

		table.typo3-browsetree {
			border: 0;
			border-collapse: collapse;
		}


		/*---------------------------------- filelist */
		table.filelist {
			font-size: 90%;
			border-collapse: collapse;
			border: 1px solid #B5B3CB;
			width: 100%;
		}
		table.filelist td img {
			border-width: 0px;
			border-color: white;
			padding: 0px;
			margin: 0px;
		}
		table.filelist td {
			padding: 5px;
		}
		table.filelist th {
			color: white;
			background: #B5B3CB;
			padding-bottom: 9px;
		}
		table.filelist td a img {
			border-width: 0px;
			border-color: white;
			padding: 0px;
			margin: 0px;
		}
		/*------------------------------- single view */
		table.file_singleView {
			width: 100%;
			border-collapse: collapse;
			border: 1px solid #B5B3CB;
			font-size: 90%;
		}
		table.file_singleView th {
			text-align: left;
			padding: 5px;
			color: white;
			background: #B5B3CB;
		}
		table.file_singleView td {
			padding: 3px;
		}
		table.file_singleView td.title {
			font-weight: bold;
			color: #B5B3CB;
			width: 50%;
		}
		.tree_selectedCats {
			background: #B5B3CB;
			font-weight: bold;
		}
		.tree_unselectedCats {

		}
		/*-------------------------------- category list */
		.delete_button a:link,
		.delete_button a:visited{
			border: 1px solid #B5B3CB;
			font-size: 130%;
			font-weight: bold;
			color: #B5B3CB;
			width: 20px;
			height: 20px;
			padding-right: 5px;
			padding-left: 5px;
		}
		.delete_button a:hover {
			background: #B5B3CB;
			color: white;
		}
		/*------------------------------ Menu */
		ul.foldout {
			list-style: none;
			position: absolute;
			top: 1px;
			border: 1px solid #B5B3CB;
			margin: 0px;
			padding: 0px;
			border-bottom-width: 0px;
			border-top-width: 0px;
			background: white;
		}
		ul.foldout li {
			padding: 10px;
			border-bottom: 1px solid #B5B3CB;
			font-size: 90%;
			min-width: 300px;
		}

		/******************************** Resultlist */
		ul#browseresultlist {
			padding: 0px;
			margin: 0px;
			list-style: none;
		}
		ul#browseresultlist li {
			float: left;
			padding-right: 10px;
		}
		
		/******************************** Advanced category tree */
		.cattree {
			width:400px;
		}
		
		.treeBgWhite {
		
		}
		
		.treeBgGrey {
			background:lightgrey;
		}
				
		.checkbox_green a {
			display:block;
			float:left;
			padding-left:20px;
			background:url(../typo3conf/ext/dam_frontend/res/images/checkbox_green.gif) no-repeat left top;
		}
		
		.checkbox a{
			display:block;
			float:left;
			padding-left:20px;
			background:url(../typo3conf/ext/dam_frontend/res/images/checkbox.gif) no-repeat left top;
		}

		.checkbox_grey a{
			display:block;
			float:left;
			padding-left:20px;
			background:url(../typo3conf/ext/dam_frontend/res/images/checkbox_grey.gif) no-repeat left top;
		}
		
		.no_access {
			background:url(../typo3conf/ext/dam_frontend/res/images/no_access.gif) no-repeat left top;
			padding-left: 17px;
			
		}
		
		.tree_close {
			padding-left: 17px;
			background:url(../typo3conf/ext/dam_frontend/res/images/tree_close.gif) no-repeat left top;
		}
		
		.tree_open {
			padding-left: 17px;
			background:url(../typo3conf/ext/dam_frontend/res/images/tree_open.gif) no-repeat left top;
		}
		.tree_noControll {
			padding-left: 17px;
		}

		.dam-frontend-label {
			display:block;
			width:60px;
			float:left;
		}
	)
	debug {
		tx_damfrontend_DAL_documents.getDocumentList.SQL=0
		tx_damfrontend_DAL_documents.getDocumentList.conf=0
		tx_damfrontend_DAL_documents.getDocumentList.rows=0
		tx_damfrontend_DAL_documents.getDocumentList.rowsAfterAccessCheck=0
		tx_damfrontend_catlist.getCatSelection=0	
	}
}
[globalVar = LIT:1 = {$plugin.tx_damfrontend_pi1.doNotUsePushFile}]
# for using advanced download features with resizing we cannot use an direct link
plugin.tx_damfrontend_pi1 {
	renderFields {
		title.typolink.parameter = {field:file_path}{field:file_name}
		title.typolink.parameter.insertData = 1
		title.typolink.parameter.data > 
		title.typolink.additionalParams >
		
		link_download.typolink.parameter = {field:file_path}{field:file_name}
		link_download.typolink.parameter.insertData = 1
		link_download.typolink.parameter.data = >
		link_download.typolink.additionalParams >
	}
	singleView {
		file_name {
			typolink.parameter = {field:file_path}{field:file_name}
			typolink.parameter.insertData = 1
			typolink.parameter.data  >
			typolink.parameter.additionalParams >
			
		}
		link_download.typolink.parameter = {field:file_path}{field:file_name}
		link_download.typolink.parameter.insertData = 1
		link_download.typolink.parameter.data  >
		link_download.typolink.additionalParams >
		
		title.typolink.parameter = {field:file_path}{field:file_name}
		title.typolink.parameter.insertData = 1
		title.typolink.parameter.data > 
		title.typolink.additionalParams >
	}
}


[end]
